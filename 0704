Railsガイドを読んで
・読んだページ：31ｐ～

【ためになったこと】
・キーワード引数(35p~37p)
『def メソッド名(引数1: 基準値, 引数2: 基準値)』のようにすることで、メソッド呼び出しの際に引数を渡さなかった場合は
基準値が自動的に設定できるようにできる。
また、呼び出しの際にも『オブジェクト名.メソッド名(引数1: 値,引数2: 値)』のように引数の名前を記述することになるので
後で見返した際などに可読性が向上する。

・オーバーライドとsuper(40p)
継承した親クラスと同じ名前のメソッドを子クラスで宣言して内容を上書することをオーバーライドという。
また、オーバーライドの際に親クラスの同名メソッドを呼び出す場合は『super』を使う。
例：----------------------------------------------------------------
class Book
 def call
  "これは本です"
 end
end
class Magazine < Book
 def call
  super
  "これは雑誌です"
 end
end

> magazine = Magazine.new
> p magazine.call
⇒これは本です
　これは雑誌です
--------------------------------------------------------------------

・.map{(&:メソッド}
『変数 = オブジェクトを格納した配列.map(&:メソッド)』と記述することで、配列内容の要素となっているすべてのオブジェクトに対して指定したメソッドを呼び出し、
変数に対して配列の形で代入できる。
例：----------------------------------------------------------------
user1 = User.new("田中")
user2 = User.new("佐藤")
user3 = User.new("鈴木")

users = [user1, user2, user3]
names = users.map{&:name}
p names
⇒["田中","佐藤","鈴木"]

# 下記はnames = user.map{&:name}と同じ実行結果となる。
# names = users.map do |user|
#  user.name
# end
--------------------------------------------------------------------

・rails g scaffold 名前 変数:class名
実行することでモデル、ビュー、コントローラー、マイグレーションファイル等、CRUD操作をサポートするために必要な一連のファイルを一度に生成できる。
例：----------------------------------------------------------------
rails g scaffold User name:string email:string age:integer
⇒下記が生成される
　・Userモデル
　・マイグレーションファイル
　・Usersコントローラー
　・ユーザーの一覧、詳細、編集、新規作成のためのビュー
　・ルーティング設定
　・テストファイル
--------------------------------------------------------------------
